#+TITLE: Emacs Configuration
#+AUTHOR: Jean-Martin Archer jm@jmartin

* General

** Personal
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Jean-Martin Archer"
  user-mail-address "jm@jmartin.ca")
#+end_src

** Convenience
#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
(setq confirm-kill-emacs 'y-or-n-p)
(setq mac-emulate-three-button-mouse t)
(setq x-select-enable-clipboard nil)
(setq make-backup-files nil)

(spacemacs/toggle-aggressive-indent-globally-on)
(spacemacs/toggle-camel-case-motion-globally-on)
(spacemacs/toggle-indent-guide-globally-on)
;; (spacemacs/toggle-evil-cleverparens-on)
;; (spacemacs/toggle-smartparens-globally-on)
(setq save-interprogram-paste-before-kill t)
(setq multi-term-program-switches "--login")

(setq custom-file "~/.spacemacs.d/custom-configuration.el")
(load custom-file t)
#+END_SRC

** Github related
#+begin_src emacs-lisp :tangle yes
(setq edit-server-url-major-mode-alist '(("github\\.com" . org-mode)))
(setq paradox-github-token (shell-command "keyring get system github_paradox"))
#+end_src
* UI / Visual
#+BEGIN_SRC emacs-lisp
(spacemacs/toggle-syntax-checking-on)
(spacemacs/toggle-truncate-lines-on)
(spacemacs/toggle-vi-tilde-fringe-off)
(set-keyboard-coding-system nil)
(setq powerline-default-separator 'utf-8)
(setq neo-theme 'arrow)
(global-prettify-symbols-mode 1)
(golden-ratio-mode 1)
(menu-bar-mode 1)
#+END_SRC

* Modes

** Enabling
#+begin_src emacs-lisp :tangle yes
(delete-selection-mode 1)
(editorconfig-mode 1)
(global-auto-revert-mode t)
(global-company-mode 1)
(ws-butler-global-mode 1)
#+end_src
** Autofill
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'markdown-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Pretty symbols
#+begin_src emacs-lisp :tangle yes
(defun jm/pretty-symbols ()
  "make some word or string show as pretty Unicode symbols"
 (setq prettify-symbols-alist
        '(
          ("lambda" . 955) ; λ
          ("->" . 8594)    ; →
          ("=>" . 8658)    ; ⇒
          ("function" . ?ƒ)
)))
(add-hook 'lisp-mode-hook 'jm/pretty-symbols)
(add-hook 'org-mode-hook 'jm/pretty-symbols)
(add-hook 'js2-mode-hook 'jm/pretty-symbols)
(add-hook 'scala-mode-hook 'jm/pretty-symbols)
#+end_src

#+RESULTS:
| jm/pretty-symbols | (lambda nil (setq prettify-symbols-alist (cons (quote (function . 402)) prettify-symbols-alist)) (prettify-symbols-mode)) | tern-mode | spacemacs/js2-refactor-require | js2-imenu-extras-mode | spacemacs/js-doc-require | flycheck-mode | spacemacs//init-company-js2-mode | company-mode |
** EVIL
#+BEGIN_SRC emacs-lisp
(setq-default evil-escape-delay 0.3)
(setq-default evil-escape-key-sequence "jk")
#+END_SRC

** JS
#+BEGIN_SRC emacs-lisp
(setq-default js-indent-level 2)
#+END_SRC

** org
*** Enabling org-babel
#+begin_src emacs-lisp :tangle yes
(use-package org-babel
  :init
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)))
  )
#+end_src
*** Basic setup
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/.org/")
(org-agenda-files (list org-directory))
#+END_SRC
*** States
#+begin_src emacs-lisp :tangle yes
(setq org-todo-keywords
  '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
#+end_src
*** Capture Templates
#+begin_src emacs-lisp :tangle yes
(setq org-capture-templates
  '(
     ("t" "Todo" entry (file+headline "~/.org/todo.org" "Tasks")
       "* TODO %?\n  %i\n %a")
     ("T" "Todo with clipboard" entry (file+headline "~/.org/todo.org" "Tasks")
       "* TODO %?\n  %i\n %c\n %a")
     ("j" "Journal" entry (file+datetree "~/.org/journal.org")
       "* %?\nEntered on %U\n  %i\n %a")
     ("J" "Journal with Clipboard" entry (file+datetree "~/.org/journal.org")
       "* %?\nEntered on %U\n  %i\n %c\n %a")
     ))
#+end_src
#+RESULTS:
| t | Todo | entry | (file+headline ~/.org/todo.org Tasks) | * TODO %? |
* Keyboard Bindings
#+BEGIN_SRC emacs-lisp
(define-key evil-insert-state-map (kbd "M-<up>") 'er/expand-region)
(define-key evil-insert-state-map (kbd "M-<down>") 'er/contract-region)
(define-key evil-normal-state-map (kbd "M-<up>") 'er/expand-region)
(define-key evil-normal-state-map (kbd "M-<down>") 'er/contract-region)

(define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
(define-key evil-insert-state-map (kbd "C-e") 'end-of-line)

(spacemacs/set-leader-keys "oo" 'jm/open-org-dir)
(spacemacs/set-leader-keys "op" 'jm/open-with-sublime)
(spacemacs/set-leader-keys "oi" 'jm/open-with-idea)
(spacemacs/set-leader-keys "on" 'jm/open-with-nvim)
(spacemacs/set-leader-keys "ot" 'jm/insert-today)
(spacemacs/set-leader-keys "oh" 'jm/insert-github-tasks)
#+END_SRC

#+RESULTS:

* General Functions
#+BEGIN_SRC emacs-lisp
  (defun jm/open-org-dir ()
    (interactive)
    (helm-find-files-1 (expand-file-name "~/.org/")))

  (defun jm/insert-github-tasks ()
    (interactive)
    (insert (shell-command-to-string "$HOME/.bin/org_todo.sh  2> /dev/null")))

  (defun jm/insert-today ()
    (interactive)
    (insert (shell-command-to-string "/bin/date \"+%Y-%m-%d\"")))

  (defun jm/get-column ()
    (number-to-string (+ (current-column) 1)))

  (defun jm/get-line-number ()
    (number-to-string (line-number-at-pos)))

  (defun jm/open-with-line (app)
    (when buffer-file-name
      (save-buffer)
      (shell-command (concat app " \"" buffer-file-name ":" (jm/get-line-number) "\""))))

  (defun jm/open-with-line-column (app)
    (when buffer-file-name
      (save-buffer)
      (shell-command (concat app " \"" buffer-file-name ":" (jm/get-line-number) ":" (jm/get-column) "\""))))

  (defun jm/open-with-line-column-vim (app)
    (when buffer-file-name
      (shell-command (concat app " \"" buffer-file-name "\" \"+normal " (jm/get-line-number) "G" (jm/get-column) "|\""))))

  (defun jm/open-with-reveal (app)
    (shell-command (concat "osascript -e 'tell application \"" app "\" to activate'")))

  (defun jm/open-with-sublime ()
    (interactive)
    (jm/open-with-line-column "/usr/local/bin/subl"))

  (defun jm/open-with-idea ()
    (interactive)
    (jm/open-with-reveal "IntelliJ IDEA")
    (jm/open-with-line "/usr/local/bin/idea"))

  (defun jm/open-with-nvim ()
    (interactive)
    (jm/open-with-line-column-vim "/usr/local/Cellar/neovim-dot-app/HEAD/bin/gnvim"))
#+END_SRC
