#+TITLE: Spacemacs Configuration
#+AUTHOR: Jean-Martin Archer
#+EMAIL: jm@jmartin.ca
#+STARTUP: content
* General
** Personal
#+begin_src emacs-lisp :results none
  (setq user-full-name "Jean-Martin Archer"
    user-mail-address "jm@jmartin.ca")
#+end_src
** Environment
#+begin_src emacs-lisp :results none
  (setq exec-path (append exec-path '("/usr/local/bin")))
  (setenv "RIPGREP_CONFIG_PATH" (substitute-in-file-name "$HOME/.config/ripgrep"))
  (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
  ;; (print (shell-command-to-string "printenv"))
#+end_src

** Convenience
   #+begin_src emacs-lisp :results none
     (setq confirm-kill-emacs 'y-or-n-p)
     (setq mac-emulate-three-button-mouse t)
     ;; (setq x-select-enable-clipboard nil)
     (fset 'evil-visual-updateyour-team.vault-x-selection 'ignore)
     (setq make-backup-files nil)
     (spacemacs/toggle-indent-guide-globally-on)
     ;; (spacemacs/toggle-camel-case-motion-globally-on)
     ;; (spacemacs/toggle-evil-cleverparens-on)
     ;; (spacemacs/toggle-smartparens-globally-on)
     (setq create-lockfiles nil)
     (setq save-interprogram-paste-before-kill t)
     (setq multi-term-program-switches "--login")
     (setq gc-cons-threshold 100000000)
     (setq debug-on-error nil)
   #+end_src
** GitHub related
   #+begin_src emacs-lisp :results none
     (if (eq system-type 'darwin)
         (setq paradox-github-token (shell-command "keyring get system github_paradox"))
       (add-hook 'edit-server-done-hook
                 (lambda ()
                   (shell-command "open -a \"Google Chrome\""))))
   #+end_src
* UI/Visual
  #+begin_src emacs-lisp :results none
    (spacemacs/toggle-syntax-checking-on)
    (spacemacs/toggle-truncate-lines-on)
    (spacemacs/toggle-vi-tilde-fringe-off)
    (setq powerline-default-separator 'utf-8)
    (set-keyboard-coding-system nil)
    (setq neo-theme 'icons)
    (global-prettify-symbols-mode 1)
    (golden-ratio-mode 0)
    (menu-bar-mode 1)
    (setq-default avy-all-windows 'all-frames)
    (setq frame-title-format '("%b"))
  #+end_src
** Spaceline
   #+begin_src emacs-lisp :results none
     (defun jm/rolling-subseq (seq index len)
       (if (<= (length seq) 1)
           seq
         (if (<= (+ index len) (length seq))
             (subseq seq
                     index
                     (+ index len))
           (append (subseq seq
                           index
                           (length seq))
                   (subseq seq
                           0
                           (- (+ index len)
                              (length seq)))))))

     (defun jm/s-substring (str len)
       (if (< (length str) len)
           str
         (concat (substring str 0 (min (or (string-match " " str) 1024) len)) "…")))

     (defun jm/previous-buffer-line ()
       (let ((prev (mapcar (lambda (b) (jm/s-substring (buffer-name (car b)) 10))
                           (window-prev-buffers)))
             (next (mapcar (lambda (b) (jm/s-substring (buffer-name b) 10))
                           (window-next-buffers))))
         (mapconcat 'identity
                    (append (let ((prev-pos (position (buffer-name)
                                                      prev)))
                              (if (eq (car next) (car prev))
                                  (jm/rolling-subseq prev (+ (or prev-pos 0) 1) 3)
                                (jm/rolling-subseq prev 0 3)))
                            (if (not next)
                                nil
                              (append '("◀▶")
                                      (jm/rolling-subseq next 0 3))))
                    " ")))


     (spaceline-define-segment jm/previous-buffers
       "Displays the last three buffers"
       (jm/previous-buffer-line))
     (spaceline-toggle-jm/previous-buffers-on)

     (defun jm/test ()
       (interactive)
       (end-of-line)
       (open-line 1)
       (forward-line)
       (insert (jm/shell-command-to-string
                (concat "bub jira workday --org --prefix '***** ' "
                        (nth 0 (s-split " " (nth 4 (org-heading-components))))))))
   #+end_src

** Frame Size
   #+begin_src emacs-lisp :results none
     (if (eq system-type 'darwin)
         (add-to-list 'default-frame-alist
                      '(height . 60))
       (add-to-list 'default-frame-alist
                    '(width . 134)))
   #+end_src
** Whitespace
   #+begin_src emacs-lisp :results none
     (setq whitespace-display-mappings
           ;; all numbers are Unicode codepoint in decimal. ⁖ (insert-char 182 1)
           '((tab-mark 9 [183 9] [255 9]))) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」

     (global-whitespace-mode 1)
     (setq fill-column 120)
     (setq whitespace-line-column 260)

     (setq-default
      tab-width 2
      indent-tabs-mode nil
      fci-rule-column 120)
   #+end_src
** Natural Title bar
   #+begin_src emacs-lisp :results none
     (add-to-list 'default-frame-alist
                  '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist
                  '(ns-appearance . dark))
   #+end_src

* Modes
  #+begin_src emacs-lisp :results none
    (require 'helm-bookmark)
    (setq-default tab-width 2 standard-indent 2)
  #+end_src

** Terminal
   #+begin_src emacs-lisp :results none
     (setq ansi-term-color-vector [term term-color-black term-color-red term-color-green
                                        term-color-yellow term-color-blue term-color-magenta
                                        term-color-cyan term-color-white])
   #+end_src

** Enabling
   #+begin_src emacs-lisp :results none
     (server-start)
     (delete-selection-mode 1)
     (editorconfig-mode 1)
     (spacemacs/toggle-smartparens-globally-on)
     (global-company-mode 1)
     (ws-butler-global-mode 1)
     (setq-default abbrev-mode t)
     (setq save-abbrevs 'silently)
     (super-save-mode +1)
   #+end_src
** Company
   #+begin_src emacs-lisp :results none
     (setq company-idle-delay 0.5)
   #+end_src
** Smart-Jump
   #+begin_src emacs-lisp :results none
     (require 'smart-jump)
     (smart-jump-setup-default-registers)
   #+end_src

** Autorevert
   #+begin_src emacs-lisp :results none
     ;; (global-auto-revert-mode t)
     (setq auto-revert-interval 0.25)
     ;; (setq auto-revert-verbose nil)
     (setq revert-without-query '(".*"))
   #+end_src
** Markdown
   #+begin_src emacs-lisp :results none
     (defun jm/markdown-mode-config ()
       (setq tab-width 4)
       (setq indent-tabs-mode nil)
       (setq markdown-asymmetric-header t))

     (add-hook 'markdown-mode-hook 'jm/markdown-mode-config)
   #+end_src

** Aggresive Indent
   #+begin_src emacs-lisp :results none
     ;; (add-hook 'emacs-lisp-mode-hook 'aggressive-indent-mode)
   #+end_src
** Atomic Chrome
   #+begin_src emacs-lisp :results none
     (atomic-chrome-start-server)
   #+end_src

** Parinfer
   #+begin_src emacs-lisp :results none
     (require 'parinfer)
     (add-hook 'emacs-lisp-mode-hook 'parinfer-mode)
     (add-hook 'emacs-lisp-mode-hook 'turn-off-smartparens-mode)
   #+end_src
** Python
   #+begin_src emacs-lisp :results none
     (setq naconda-mode-server-command "
     import sys
     import anaconda_mode
     anaconda_mode.main(sys.argv[1:])
     ")
     (defun jm/python-mode-config ()
       (setq evil-shift-width 4))
     (add-hook 'python-mode-hook 'jm/python-mode-config)
   #+end_src

** Alert
   #+begin_src emacs-lisp :results none
     (setq alert-default-style 'osx-notifier)
   #+end_src
** Elisp
   #+begin_src emacs-lisp :results none
     (setq-default srefactor-newline-threshold 120)
   #+end_src

** EShell
   #+begin_src emacs-lisp :results none
     ;; disabling company-mode
     (add-hook 'eshell-mode-hook 'company-mode)
   #+end_src

** Shell
   #+begin_src emacs-lisp :results none
     (setq-default dotspacemacs-configuration-layers
                   '((shell :variables shell-default-shell 'eshell)))
   #+end_srC

** AutoMode
   #+begin_src emacs-lisp :results none
     (add-to-list 'auto-mode-alist '("\\.raml\\'" . yaml-mode))
     (add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
     (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))
     (add-to-list 'auto-mode-alist '("\\.template\\'" . json-mode))
     ;; (add-to-list 'auto-mode-alist '("\\Jenkinsfile\\'" . groovy-mode))
   #+end_src

** Docker
   #+begin_src emacs-lisp :results none
     (setenv "DOCKER_TLS_VERIFY" "0")
     (setenv "DOCKER_HOST" "tcp://10.11.12.13:2375")
   #+end_src

** Groovy
   #+begin_src emacs-lisp :results none
     (add-hook 'groovy-mode-hook
               (lambda ()
                 (setq groovy-indent-offset 2)))
   #+end_src

** Projectile
   #+begin_src emacs-lisp :results none
     (setq projectile-enable-caching nil)
   #+end_src
** Linum
   #+begin_src emacs-lisp :results none
     ;; (add-hook 'prog-mode-hook
     ;;           (lambda ()
     ;;             (linum-mode (- (* 2000 80)
     ;;                            (buffer-size)))))
   #+end_src

** Tramp
   #+begin_src emacs-lisp :results none
     (setq tramp-default-method "ssh")
   #+end_src
** Autofill
   #+begin_src emacs-lisp :results none
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'markdown-mode-hook 'turn-on-auto-fill)
   #+end_src
** Pretty symbols
   #+begin_src emacs-lisp :results none
     (defun jm/pretty-symbols ()
       "make some word or string show as pretty Unicode symbols"
       (setq prettify-symbols-alist
             '(
               ("lambda" . 955) ; λ
               ("->" . 8594)    ; →
               ("=>" . 8658)    ; ⇒
               ("function" . ?ƒ); ƒ
               )))
     (add-hook 'lisp-mode-hook 'jm/pretty-symbols)
     (add-hook 'org-mode-hook 'jm/pretty-symbols)
     (add-hook 'js2-mode-hook 'jm/pretty-symbols)
     (add-hook 'scala-mode-hook 'jm/pretty-symbols)
     (add-hook 'coffee-mode-hook 'jm/pretty-symbols)
     (add-hook 'lua-mode-hook 'jm/pretty-symbols)
   #+end_src

** Makefile
   #+begin_src emacs-lisp :results none
     (defun jm/makefile-mode-config ()
       (setq-default indent-tabs-mode t)
       (global-set-key (kbd "TAB") 'self-insert-command)
       (setq indent-tabs-mode t)
       (setq tab-width 8)
       (setq c-basic-indent 8))

     (add-hook 'makefile-mode-hook 'jm/makefile-mode-config)
     (add-hook 'makefile-bsdmake-mode-hook 'jm/makefile-mode-config)
   #+end_src

** Shell-script
   #+begin_src emacs-lisp :results none
     (defun jm/sh-mode-config ()
       (interactive)
       (spacemacs/toggle-ggtags-mode-off)
       (setq sh-indentation 2)
       (setq sh-basic-offset 2))

     (add-hook 'sh-mode-hook 'jm/sh-mode-config)
     (remove-hook 'sh-mode-hook 'ggtags-mode)

     (unless (eq system-type 'windows-nt)
       (push 'company-dabbrev-code company-backends-sh-mode))
   #+end_src

** Go
   #+begin_src emacs-lisp :results none
     (defun jm/go-mode-config ()
       (setq tab-width 2)
       (setq go-tab-width 2)
       (add-hook 'before-save-hook 'gofmt-before-save)
       (setq indent-tabs-mode 1))

     (add-hook 'go-mode-hook 'jm/go-mode-config)
   #+end_src

** EVIL
   #+begin_src emacs-lisp :results none
     (setq-default evil-escape-delay 0.2)
     (setq-default evil-escape-key-sequence "jk")
     (evil-ex-define-cmd "E" 'revert-buffer)
     (evil-ex-define-cmd "WQ" 'evil-save-modified-and-close)
     (evil-ex-define-cmd "Wq" 'evil-save-modified-and-close)
     (require 'evil-string-inflection)
   #+end_src

** Scala
   #+begin_src emacs-lisp :results none
     (setq ensime-startup-snapshot-notification nil)
   #+end_src
** Java
   #+begin_src emacs-lisp :results none
     (add-hook 'java-mode-hook
               (lambda ()
                 (setq c-basic-offset 2 tab-width 2)))
   #+end_src
** JS
   #+begin_src emacs-lisp :results none
     (setq-default js-indent-level 2)
   #+end_src
** Magit
   #+begin_src emacs-lisp :results none
     (setq magit-repository-directories '("~/code/"))
     (setq-default vc-follow-symlinks t)
     (setq magit-save-repository-buffers 'dontask)
     (setq magit-push-current-set-remote-if-missing t)
     (defun jm/git-commit-mode-config()
       (setq-local fill-column 72)
       (turn-on-auto-fill)
       (jm/magit-commit-message))
     (defun jm/git-status-mode-config()
       (setq-local evil-escape-key-sequence nil))
     (add-hook 'git-commit-mode-hook 'jm/git-commit-mode-config)
     (add-hook 'magit-status-mode-hook 'jm/git-status-mode-config)
   #+end_src
** Org
*** Basic setup
    #+begin_src emacs-lisp :results none
      (setq org-directory "~/.org/")
      (setq org-default-notes-file "~/.org/main.org")
      (setq org-hide-emphasis-markers t)
      (setq org-agenda-files (list "~/.org/main.org"
                                   "~/.org/work.org"
                                   "~/.org/todoist.org"
                                   "~/.org/calendar-personal.org"
                                   "~/.org/calendar-work.org"))
      (setq org-refile-targets
            '(("main.org" :maxlevel . 1)
              ("work.org" :maxlevel . 1)
              (nil :maxlevel . 3)))

      (setq org-startup-folded nil)
      (setq org-catch-invisible-edits 'error)
      (add-hook 'org-mode-hook 'jm/org-hooks)

      (defun jm/org-hooks ()
        (smartparens-mode)
        (setq evil-auto-indent nil)
        ;; (linum-mode -1)
        )

      (setq org-todo-keywords
            (quote ((sequence "TODO(d)" "|" "DONE(t)")
                    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

      (setq org-todo-state-tags-triggers
            (quote (("CANCELLED" ("cancelled" . t))
                    ("WAITING" ("waiting" . t))
                    ("HOLD" ("waiting") ("HOLD" . t))
                    (done ("waiting") ("hold"))
                    ("TODO" ("waiting") ("cancelled") ("hold"))
                    ("NEXT" ("waiting") ("cancelled") ("hold"))
                    ("DONE" ("waiting") ("cancelled") ("hold")))))
      (setq org-use-fast-todo-selection t)

      (setq org-startup-with-inline-images t)
      (setq org-export-with-section-numbers nil)
    #+end_src
*** Extra packages
    #+begin_src emacs-lisp :results none
      (require 'org-protocol)
      ;; (require 'org-mac-link)
      (require 'ox-jira)
      (require 'ox-confluence)
    #+end_src

*** Babel
    #+begin_src emacs-lisp :results none
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-src-window-setup 'current-window)
      ;; grep -o '/[a-zA-Z0-9\./]*/plantuml.jar'  /usr/local/bin/plantuml
      (setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2018.5/libexec/plantuml.jar")
    #+end_src
*** Capture Templates
    #+begin_src emacs-lisp :results none
      (add-hook 'org-capture-mode-hook 'evil-insert-state)
      (setq org-capture-templates '(("t" "Todo"
                                     entry
                                     (file+headline "~/.org/main.org" "Inbox")
                                     "* TODO %?\nEntered on %U\n%i\n%a")
                                    ("T" "Todo with clipboard"
                                     entry
                                     (file+headline "~/.org/main.org" "Inbox")
                                     "* TODO %?\nEntered on %U\n%i\n%c\n%a")
                                    ("w" "Inbox for work"
                                     entry
                                     (file+headline "~/.org/work.org" "Inbox")
                                     "* TODO %?\nEntered on %U\n%i\n%a")
                                    ("W" "Inbox with clipboard for work"
                                     entry
                                     (file+headline "~/.org/work.org" "Inbox")
                                     "* TODO %?\nEntered on %U\n%i\n%c\n%a")
                                    ("c" "Todo with clipboard for work"
                                     entry
                                     (file+headline "~/.org/work.org" "Inbox")
                                     "* TODO %?\nEntered on %U\n%i\n%c\n%a\n[[file://%F::%(with-current-buffer (org-capture-get :original-buffer) (number-to-string (line-number-at-pos)))][%F]] ")
                                    ("n" "Todo with clipboard for work"
                                     entry
                                     (file+headline "~/.org/work.org" "Notes")
                                     "* %?\nEntered on %U\n%i\n%c\n%a\n[[file://%F::%(with-current-buffer (org-capture-get :original-buffer) (number-to-string (line-number-at-pos)))][%F]] ")
                                    ("s" "Add journal entry to work"
                                     entry
                                     (file+datetree "~/.org/work.org" "Journal")
                                     "* %?\nEntered on %U\n%i\n%a")
                                    ("S" "Add journal entry to work DONE"
                                     entry
                                     (file+datetree "~/.org/work.org" "Journal")
                                     "* %?\nEntered on %U\n%i\n%a")
                                    ("e" "Add past journal entry to work DONE"
                                     entry
                                     (file+datetree+prompt "~/.org/work.org" "Journal")
                                     "* DONE %?\nEntered on %U\n%i\n%a")
                                    ("r" "References / Research"
                                     entry
                                     (file+headline "~/.org/references.org" "Research")
                                     "** %?%c\nEntered on %U\n%i\n\n%a")
                                    ("R" "References / Research TODO"
                                     entry
                                     (file+headline "~/.org/references.org" "Research")
                                     "** TODO %?\nEntered on %U\n%i\n\n%a")
                                    ("y" "References / Temporary"
                                     entry
                                     (file+headline "~/.org/references.org" "Temporary")
                                     "** %?%c\nEntered on %U\n%i\n\n%a")
                                    ("b" "References / Books"
                                     entry
                                     (file+headline "~/.org/references.org" "Books")
                                     "** %?%c\nEntered on %U\n%i\n\n%a")
                                    ("p" "Protocol"
                                     entry
                                     (file+headline "~/.org/references.org" "Research")
                                     "* %?\nSource: %u, %c\n #+begin_quote\n%i\n#+end_quote\n")
                                    ("L" "Protocol Link"
                                     entry
                                     (file+headline "~/.org/references.org" "Research")
                                     "* %?[[%:link][%:description]] \nCaptured On: %U")
                                    ("j" "Journal"
                                     entry
                                     (file+datetree "~/.org/journal.org")
                                     "* %?\nEntered on %U\n%i\n%a")
                                    ("J" "Journal with Clipboard"
                                     entry
                                     (file+datetree "~/.org/journal.org")
                                     "* %?\nEntered on %U\n%i\n%c\n%a")))
    #+end_src

*** org-present
    #+begin_src emacs-lisp :results none
      (eval-after-load "org-present"
        '(progn
           (add-hook 'org-present-mode-hook
                     (lambda ()
                       (org-present-big)
                       (toggle-frame-fullscreen)
                       (org-display-inline-images)
                       (org-present-hide-cursor)
                       (org-present-read-only)))
           (add-hook 'org-present-mode-quit-hook
                     (lambda ()
                       (org-present-small)
                       (org-remove-inline-images)
                       (org-present-show-cursor)
                       (toggle-frame-fullscreen)
                       (org-present-read-write)))))
    #+end_src
* Keyboard Bindings
  #+begin_src emacs-lisp :results none
    (define-key evil-insert-state-map (kbd "M-<up>") 'er/expand-region)
    (define-key evil-insert-state-map (kbd "M-<down>") 'er/contract-region)
    (define-key evil-normal-state-map (kbd "M-<up>") 'er/expand-region)
    (define-key evil-normal-state-map (kbd "M-<down>") 'er/contract-region)
    (define-key evil-normal-state-map (kbd "[s") 'flycheck-previous-error)
    (define-key evil-normal-state-map (kbd "]s") 'flycheck-next-error)
    (define-key evil-normal-state-map (kbd "]P") 'jm/append-clipboard)
    (define-key evil-normal-state-map (kbd "K") (lambda() (interactive) (progn (execute-kbd-macro "ciw"))))
    (define-key evil-normal-state-map (kbd "H-/") 'evil-commentary)
    (global-set-key (kbd "<f2>") 'flycheck-next-error)
    (define-key evil-normal-state-map (kbd "zr") 'jm/open-folds)
    (evil-define-key 'normal evil-org-mode-map "t" 'org-todo)
    (global-set-key (kbd "H-<left>") 'back-to-indentation)
    (global-set-key (kbd "H-<right>") 'end-of-line)
    (global-set-key (kbd "H-b") 'smart-jump-go)
    (global-set-key (kbd "H-j") 'previous-buffer)
    (global-set-key (kbd "H-k") 'next-buffer)
    (global-set-key (kbd "H-t") 'neotree-find)
    (global-set-key (kbd "H-[") 'evil-jump-backward)
    (global-set-key (kbd "H-]") 'evil-jump-forward)
    (global-set-key (kbd "C-H-g") 'evil-iedit-state/iedit-mode)
    (global-set-key (kbd "H-d") 'mc/mark-next-like-this)
    (global-set-key (kbd "H-D") 'mc/skip-to-next-like-this)
    (global-set-key (kbd "C-i") 'evil-jump-forward)
    (global-set-key (kbd "C-'") (lambda() (interactive) (insert "'")))
    (global-set-key (kbd "C-\"") (lambda() (interactive) (insert "\"")))
    (global-set-key (kbd "C-M-H-I") 'jm/open-with-idea)
    ;; (global-set-key (kbd "C-SPC") 'helm-company)
    (global-set-key (kbd "C-M-SPC") 'helm-yas-complete)
    (define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
    (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)

    (spacemacs/set-leader-keys-for-major-mode 'org-mode "r" 'org-refile)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "o" 'org-edit-src-code)

    (spacemacs/set-leader-keys "ac" 'jm/calc)
    (spacemacs/set-leader-keys "ag" 'org-mac-grab-link)
    (spacemacs/set-leader-keys "ah" 'engine/search-github)
    (spacemacs/set-leader-keys "by" 'spacemacs/copy-whole-buffer-to-clipboard)
    (spacemacs/set-leader-keys "fi" 'jm/open-iterm)
    (spacemacs/set-leader-keys "jj" 'helm-jump-in-buffer)
    (spacemacs/set-leader-keys "gc" 'magit-commit)
    (spacemacs/set-leader-keys "gn" 'jm/magit-branch-from-jira)
    (spacemacs/set-leader-keys "gp" 'jm/github-open-pr)
    (spacemacs/set-leader-keys "gg" 'magit-status)
    (spacemacs/set-leader-keys "ih" 'jm/insert-left)
    (spacemacs/set-leader-keys "il" 'jm/insert-right)
    (spacemacs/set-leader-keys "oC" 'jm/open-config-private)
    (spacemacs/set-leader-keys "oO" 'jm/org-github-out)
    (spacemacs/set-leader-keys "oc" 'jm/open-config)
    (spacemacs/set-leader-keys "of" 'jm/helm-forks-dir)
    (spacemacs/set-leader-keys "oI" 'jm/org-github-in)
    (spacemacs/set-leader-keys "oh" 'jm/helm-home-dir)
    (spacemacs/set-leader-keys "oi" 'jm/open-project-iterm)
    (spacemacs/set-leader-keys "oo" 'jm/open-with-idea)
    (spacemacs/set-leader-keys "op" 'jm/open-with-vscode)
    (spacemacs/set-leader-keys "ol" 'org-content)
    (spacemacs/set-leader-keys "om" 'jm/open-main)
    (spacemacs/set-leader-keys "on" 'jm/open-with-nvim)
    (spacemacs/set-leader-keys "od" 'jm/helm-org-dir)
    (spacemacs/set-leader-keys "os" 'jm/open-with-sublime)
    (spacemacs/set-leader-keys "or" 'jm/open-references)
    (spacemacs/set-leader-keys "ow" 'jm/open-work)
    (spacemacs/set-leader-keys "ot" 'jm/open-inbox)
    (spacemacs/set-leader-keys "oy" 'jm/insert-jira-workday)
    (spacemacs/set-leader-keys "pi" 'jm/open-project-iterm)
    (spacemacs/set-leader-keys "tP" 'parinfer-toggle-mode)
    (spacemacs/set-leader-keys "wa" 'jm/split-window-below-and-find-file)
    (spacemacs/set-leader-keys "ws" 'jm/split-window-below)
    (spacemacs/set-leader-keys "wv" 'jm/split-window)
#+end_src
** Fixes
*** Fix while https://github.com/syl20bnr/evil-iedit-state/pull/19 gets merged.
#+begin_src emacs-lisp :results none
  (require 'evil-iedit-state)
  (define-key evil-iedit-state-map "V" 'iedit-show/hide-unmatched-lines)
#+end_src

* Functions
** Git
#+begin_src emacs-lisp :results none
  (defun jm/magit-commit-message ()
    (let ((task-id (car (s-match "^[A-Z]+-[0-9]+"
                                 (jm/git-current-branch)))))
      (when (> (length task-id) 3)
        (insert (concat task-id " "))))
    (evil-insert-state))

  (defun jm/magit-branch-from-jira ()
    (interactive)
    (helm :sources (helm-build-async-source "Create branch from JIRA"
                     :action 'jm/magit-branch
                     :candidates-process 'jm/jira-assigned-issue-process)
          :buffer "*helm jira tasks*"))

  (defun jm/jira-assigned-issue-process ()
    (start-process "assigned" nil "~/.bin/env.sh" "_jira_assigned_issues"))

  (defun jm/magit-branch (task)
    (magit-branch-and-checkout (jm/git-branch-name-sanitize task)
                               "origin/master"))

  (defun jm/git-branch-name-sanitize (name)
    (replace-regexp-in-string "-$" ""
                              (replace-regexp-in-string "-+" "-"
                                                        (replace-regexp-in-string "[^a-zA-Z0-9]" "-" name))))

  (defun jm/github-open-pr ()
    (interactive)
    (let ((branch (jm/git-current-branch))
          (repo (jm/github-repository)))
      (start-process "bub pr" nil "bub" "workflow" "pr")))

  (defun jm/git-current-branch ()
    (s-trim (shell-command-to-string "git symbolic-ref --short -q HEAD")))

  (defun jm/git-current-origin ()
    (s-trim (shell-command-to-string "git config --get remote.origin.url")))

  (defun jm/github-repository ()
    (concat "https://github.com/"
            (s-chop-suffix ".git"
                           (replace-regexp-in-string "^.*github\.com."
                                                     ""
                                                     (jm/git-current-origin)))))
#+end_src
** Editing
#+begin_src emacs-lisp :results none
  (defun jm/append-clipboard ()
    (interactive)
    (progn
      (end-of-line)
      (insert " ")
      (yank)))
#+end_src

** Utils
#+begin_src emacs-lisp :results none
  (defun jm/open-folds ()
    (interactive)
    (evil-open-folds)
    (recenter))

  (defun jm/calc ()
    (interactive)
    (quick-calc)
    (yank))

  (defun jm/insert-today ()
    (interactive)
    (insert (shell-command-to-string "/bin/date \"+%Y-%m-%d\"")))

  (defun jm/insert-left ()
    (interactive)
    (insert " "))

  (defun jm/insert-right ()
    (interactive)
    (evil-forward-char 1)
    (insert " ")
    (evil-backward-char 2))

  (defun jm/shell-command-to-string (command)
    (with-output-to-string
      (with-current-buffer
          standard-output
        (process-file shell-file-name nil '(t nil)  nil shell-command-switch command))))

  (defun jm/camel-to-snake-case ()
    (interactive)
    (progn (replace-regexp "\\([A-Z]\\)" "_\\1" nil (region-beginning) (region-end)
                                         (downcase-region (region-beginning) (region-end)))))
#+end_src
** Org
#+begin_src emacs-lisp :results none
  (defun jm/insert-jira-workday ()
    (interactive)
    (end-of-line)
    (open-line 1)
    (forward-line)
    (insert (jm/shell-command-to-string
             (concat "bub jira workday --org --prefix '***** ' "
                     (nth 0 (s-split " " (nth 4 (org-heading-components))))))))

#+end_src

** Window Management
#+begin_src emacs-lisp :results none
  (defun jm/split-window ()
    (interactive)
    (split-window-right-and-focus)
    (spacemacs/alternate-buffer))

  (defun jm/split-window-below ()
    (interactive)
    (split-window-below-and-focus)
    (spacemacs/alternate-buffer))

  (defun jm/split-window-below-and-find-file ()
    (interactive)
    (split-window-below-and-focus)
    (helm-projectile-find-file))
#+end_src

** File Navigation
#+begin_src emacs-lisp :results none
  (defun jm/open-file (file)
    (find-file (expand-file-name file))
    (evil-normal-state))

  (defun jm/open (file)
    (shell-command (concat "open " file)))

  (defun jm/open-config ()
    (interactive)
    (jm/open-file "~/.spacemacs.d/configuration.org"))

  (defun jm/open-config-private ()
    (interactive)
    (jm/open-file "~/.private/configuration.org"))

  (defun jm/open-main ()
    (interactive)
    (jm/open-file "~/.org/main.org"))

  (defun jm/open-inbox ()
    (interactive)
    (jm/open-file "~/.org/main.org"))

  (defun jm/open-references ()
    (interactive)
    (jm/open-file "~/.org/references.org"))

  (defun jm/open-work ()
    (interactive)
    (jm/open-file "~/.org/work.org"))

  (defun jm/helm-org-dir ()
    (interactive)
    (helm-find-files-1 (expand-file-name "~/.org/")))

  (defun jm/helm-home-dir ()
    (interactive)
    (helm-find-files-1 (expand-file-name "~/")))

  (defun jm/helm-work-dir ()
    (interactive)
    (helm-find-files-1 (expand-file-name "~/Code/benchlabs/")))
#+end_src

** External Applications
#+begin_src emacs-lisp :results none
  (defun jm/get-column ()
    (number-to-string (+ (current-column) 1)))

  (defun jm/get-line-number ()
    (number-to-string (line-number-at-pos)))

  (defun jm/open-with-line (app)
    (when buffer-file-name
      (save-buffer)
      (shell-command (concat app " \"" buffer-file-name ":" (jm/get-line-number) "\""))))

  (defun jm/open-with-line-column (app)
    (when buffer-file-name
      (save-buffer)
      (shell-command (concat app " \"" buffer-file-name ":" (jm/get-line-number) ":" (jm/get-column) "\""))))

  (defun jm/open-with-line-column-vim (app)
    (when buffer-file-name
      (shell-command (concat app " \"" buffer-file-name "\" \"+normal " (jm/get-line-number) "G" (jm/get-column) "|\""))))

  (defun jm/open-with-reveal (app)
    (shell-command (concat "osascript -e 'tell application \"" app "\" to activate'")))

  (defun jm/open-with-sublime ()
    (interactive)
    (jm/open-with-line-column "/usr/local/bin/subl"))

  (defun jm/open-iterm ()
    (interactive)
    (shell-command (concat "~/.bin/iterm-open.sh '" default-directory "'")))

  (defun jm/open-project-iterm ()
    (interactive)
    (shell-command (concat "~/.bin/iterm-open.sh \"$(git rev-parse --show-toplevel)\"")))

  (defun jm/open-with-idea ()
    (interactive)
    (jm/open-with-reveal "IntelliJ IDEA")
    (jm/open-with-line "/usr/local/bin/idea"))

  (defun jm/open-with-vscode ()
    (interactive)
    (jm/open-with-line-column "/usr/local/bin/code -g"))

  (defun jm/open-with-nvim ()
    (interactive)
    (jm/open-with-line-column-vim "/usr/local/Cellar/neovim-dot-app/HEAD/bin/gnvim"))
#+end_src
** Vendors
*** Endless Autocorrect
 Per [[http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html][Endless parentheses]] copied on 2016-05-17
 #+begin_src emacs-lisp :results none
   (define-key ctl-x-map "\C-i"
     #'endless/ispell-word-then-abbrev)

   (defun endless/simple-get-word ()
     (car-safe (save-excursion (ispell-get-word nil))))

   (defun endless/ispell-word-then-abbrev (p)
     "Call `ispell-word', then create an abbrev for it.
   With prefix P, create local abbrev. Otherwise it will
   be global.
   If there's nothing wrong with the word at point, keep
   looking for a typo until the beginning of buffer. You can
   skip typos you don't want to fix with `SPC', and you can
   abort completely with `C-g'."
     (interactive "P")
     (let (bef aft)
       (save-excursion
         (while (if (setq bef (endless/simple-get-word))
                    ;; Word was corrected or used quit.
                    (if (ispell-word nil 'quiet)
                        nil ; End the loop.
                      ;; Also end if we reach `bob'.
                      (not (bobp)))
                  ;; If there's no word at point, keep looking
                  ;; until `bob'.
                  (not (bobp)))
           (backward-word)
           (backward-char))
         (setq aft (endless/simple-get-word)))
       (if (and aft bef (not (equal aft bef)))
           (let ((aft (downcase aft))
                 (bef (downcase bef)))
             (define-abbrev
               (if p local-abbrev-table global-abbrev-table)
               bef aft)
             (message "\"%s\" now expands to \"%s\" %sally"
                      bef aft (if p "loc" "glob")))
         (user-error "No typo at or before point"))))
 #+end_src
