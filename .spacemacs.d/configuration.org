#+TITLE: Spacemacs Configuration
#+AUTHOR: Jean-Martin Archer
#+EMAIL: jm@jmartin.ca
#+STARTUP: content
* General
** Personal
#+begin_src emacs-lisp :results none
(setq user-full-name "Jean-Martin Archer"
  user-mail-address "jm@jmartin.ca")
#+end_src
** Executables
#+begin_src emacs-lisp :results none
(setq exec-path (append exec-path '("/usr/local/bin")))
#+end_src
** Convenience
#+begin_src emacs-lisp :results none
  (setq confirm-kill-emacs 'y-or-n-p)
  (setq mac-emulate-three-button-mouse t)
  ;; (setq x-select-enable-clipboard nil)
  (setq make-backup-files nil)
  (spacemacs/toggle-indent-guide-globally-on)
  ;; (spacemacs/toggle-camel-case-motion-globally-on)
  ;; (spacemacs/toggle-evil-cleverparens-on)
  ;; (spacemacs/toggle-smartparens-globally-on)
  (setq save-interprogram-paste-before-kill t)
  (setq multi-term-program-switches "--login")
#+end_src
*** Custom file
#+begin_src emacs-lisp :results none
(setq custom-file "~/.spacemacs.d/custom-configuration.el")
(load custom-file t)
#+end_src
** GitHub related                                                       :git:
#+begin_src emacs-lisp :results none
  (setq edit-server-url-major-mode-alist '(("github\\.com" . org-mode)))
  (if (eq system-type 'darwin)
    (setq paradox-github-token (shell-command "keyring get system github_paradox"))
    (add-hook 'edit-server-done-hook (lambda () (shell-command "open -a \"Google Chrome\"")))
  )
#+end_src
* UI/Visual
#+begin_src emacs-lisp :results none
(spacemacs/toggle-syntax-checking-on)
(spacemacs/toggle-truncate-lines-on)
(spacemacs/toggle-vi-tilde-fringe-off)
(setq powerline-default-separator 'utf-8)
(set-keyboard-coding-system nil)
(setq neo-theme 'arrow)
(global-prettify-symbols-mode 1)
(golden-ratio-mode 0)
(menu-bar-mode 1)
(setq-default avy-all-windows 'all-frames)
#+end_src
** Frame Size
#+begin_src emacs-lisp :results none
(if (eq system-type 'darwin)
  (add-to-list 'default-frame-alist '(height . 60))
  (add-to-list 'default-frame-alist '(width . 134))
)
#+end_src
** Whitespace
#+begin_src emacs-lisp :results none
(setq whitespace-style '(tabs tab-mark))
(global-whitespace-mode 1)
(setq fill-column 120)
(setq whitespace-line-column 260)
(setq-default
tab-width 2
indent-tabs-mode nil
fci-rule-column 120)
#+end_src
* Modes
** Enabling
#+begin_src emacs-lisp :results none
    (delete-selection-mode 1)
    (editorconfig-mode 1)
    (global-auto-revert-mode t)
    (global-company-mode 1)
    (ws-butler-global-mode 1)
    (setq-default abbrev-mode t)
    (setq save-abbrevs 'silently)
    (super-save-mode +1)
#+end_src
** RAML
#+begin_src emacs-lisp :results none
  (add-to-list 'auto-mode-alist '("\\.raml\\'" . yaml-mode))
#+end_src

** Linum
#+begin_src emacs-lisp :results none
  (add-hook 'prog-mode-hook
            (lambda () (linum-mode (- (* 5000 80) (buffer-size)))))
#+end_src

** Autofill
#+begin_src emacs-lisp :results none
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'markdown-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src
** Pretty symbols
#+begin_src emacs-lisp :results none
(defun jm/pretty-symbols ()
  "make some word or string show as pretty Unicode symbols"
  (setq prettify-symbols-alist
    '(
       ("lambda" . 955) ; λ
       ("->" . 8594)    ; →
       ("=>" . 8658)    ; ⇒
       ("function" . ?ƒ); ƒ
       )))
(add-hook 'lisp-mode-hook 'jm/pretty-symbols)
(add-hook 'org-mode-hook 'jm/pretty-symbols)
(add-hook 'js2-mode-hook 'jm/pretty-symbols)
(add-hook 'scala-mode-hook 'jm/pretty-symbols)
(add-hook 'coffee-mode-hook 'jm/pretty-symbols)
(add-hook 'lua-mode-hook 'jm/pretty-symbols)
#+end_src

** Makefile
#+begin_src emacs-lisp :results none
(defun jm/makefile-mode-config ()
  (setq indent-tabs-mode t)
  (setq-default indent-tabs-mode t)
  (global-set-key (kbd "TAB") 'self-insert-command)
  (setq tab-width 8)
  (setq c-basic-indent 8))

(add-hook 'makefile-mode-hook 'jm/makefile-mode-config)
#+end_src
** shell-script
#+begin_src emacs-lisp :results none
  (defun jm/sh-mode-config ()
    (interactive)
    (setq sh-indentation 2)
    (setq sh-basic-offset 2))

  (add-hook 'sh-mode-hook 'jm/sh-mode-config)
  (unless (eq system-type 'windows-nt)
    (push 'company-dabbrev-code company-backends-sh-mode))
#+end_src

** EVIL
#+begin_src emacs-lisp :results none
(setq-default evil-escape-delay 0.2)
(setq-default evil-escape-key-sequence "jk")
#+end_src

** JS
#+begin_src emacs-lisp :results none
(setq-default js-indent-level 2)
#+end_src

** proselint
#+begin_src emacs-lisp :results none
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
        (id (one-or-more (not (any " "))))
        (message) line-end))
  :modes (text-mode markdown-mode gfm-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+end_src

** magit                                                                :git:
#+begin_src emacs-lisp :results none
  (setq magit-repository-directories '("~/Work/"))
  (setq-default vc-follow-symlinks t)
  (add-hook 'git-commit-mode-hook 'jm/magit-commit-message)
#+end_src
** org

*** org-babel
#+begin_src emacs-lisp :results none
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
#+end_src
*** org-mac-link
#+begin_src emacs-lisp :results none
(add-hook 'org-mode-hook (lambda ()
  (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)))
#+end_src

*** Basic setup
  #+begin_src emacs-lisp :results none
    (setq org-directory "~/.org/")
    (setq org-default-notes-file "~/.org/inbox.org")
    (setq org-hide-emphasis-markers t)
    (setq org-agenda-files (list org-directory))
    (setq org-startup-folded t)
  #+end_src
*** Capture Templates
#+begin_src emacs-lisp :results none
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
  (setq org-capture-templates
        '(
          ("t" "Todo"
           entry
           (file+headline "~/.org/inbox.org" "Tasks")
           "* TODO %?\n%i\n%a")

          ("T" "Todo with clipboard"
            entry
            (file+headline "~/.org/inbox.org" "Tasks")
            "* TODO %?\n%i\n%c\n%a")

          ("w" "Todo for work"
            entry
            (file+headline "~/.org/inbox.org" "Work")
            "* TODO %?\n%i\n%a")

          ("W" "Todo with clipboard for work"
            entry
            (file+headline "~/.org/inbox.org" "Work")
            "* TODO %?\n%i\n%c\n%a")

          ("q" "Question for work"
            entry
            (file+olp "~/.org/inbox.org" "Work" "Questions")
            "*** TODO %? :work:\nEntered on %U\n%i\n%a")

          ("k" "Kudos for work"
            entry
            (file+olp "~/.org/inbox.org" "Work" "Kudos")
            "*** TODO %?\n%i\n%a")

          ("s" "Add note to standup"
            plain
            (file "~/.org/standup.org")
            "** TODO %?\n%i\n%a")

          ("S" "Add note to standup DONE"
            plain
            (file "~/.org/standup.org")
            "** DONE %?\n%i\n%a")

          ("r" "References / Research"
            entry
            (file+headline "~/.org/references.org" "Research")
            "** %?%c\nEntered on %U\n%i\n\n%a")

          ("R" "References / Research TODO"
            entry
            (file+headline "~/.org/references.org" "Research")
            "** TODO %?\nEntered on %U\n%i\n\n%a")

          ("b" "References / Books"
            entry
            (file+headline "~/.org/references.org" "Books")
            "** %?%c\n%i\n\n%a")

          ("j" "Journal"
            entry
            (file+datetree "~/.org/journal.org")
            "* %?\nEntered on %U\n%i\n%a")

          ("J" "Journal with Clipboard"
            entry
            (file+datetree "~/.org/journal.org")
            "* %?\nEntered on %U\n%i\n%c\n%a")
          ))
#+end_src

* Keyboard Bindings
#+begin_src emacs-lisp :results none
  (define-key evil-insert-state-map (kbd "M-<up>") 'er/expand-region)
  (define-key evil-insert-state-map (kbd "M-<down>") 'er/contract-region)
  (define-key evil-normal-state-map (kbd "M-<up>") 'er/expand-region)
  (define-key evil-normal-state-map (kbd "M-<down>") 'er/contract-region)
  (define-key evil-normal-state-map (kbd "[s") 'flycheck-previous-error)
  (define-key evil-normal-state-map (kbd "]s") 'flycheck-next-error)
  (global-set-key (kbd "s-<left>") 'beginning-of-line)
  (global-set-key (kbd "s-<right>") 'end-of-line)
  (global-set-key (kbd "s-t") 'make-frame)
  (define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
  (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)

  (spacemacs/set-leader-keys "oo" 'jm/helm-org-dir)
  (spacemacs/set-leader-keys "oh" 'jm/helm-home-dir)
  (spacemacs/set-leader-keys "op" 'jm/open-with-sublime)
  (spacemacs/set-leader-keys "oi" 'jm/open-with-idea)
  (spacemacs/set-leader-keys "on" 'jm/open-with-nvim)
  (spacemacs/set-leader-keys "om" 'jm/open-main)
  (spacemacs/set-leader-keys "or" 'jm/open-references)
  (spacemacs/set-leader-keys "ot" 'jm/open-inbox)
  (spacemacs/set-leader-keys "oc" 'jm/open-config)
  (spacemacs/set-leader-keys "os" 'jm/open-standup)
  (spacemacs/set-leader-keys "og" 'jm/org-github-todo)
  (spacemacs/set-leader-keys "ow" 'jm/helm-work-dir)
  (spacemacs/set-leader-keys "of" 'jm/helm-forks-dir)
  (spacemacs/set-leader-keys "ol" 'org-content)
  (spacemacs/set-leader-keys "ag" 'engine/search-google)
#+end_src

* General Functions
#+begin_src emacs-lisp :results none
    (defun jm/open-config ()
      (interactive)
      (find-file (expand-file-name "~/.spacemacs.d/configuration.org")))

    (defun jm/magit-commit-message ()
      (let ((branch-name (shell-command-to-string "git symbolic-ref --short -q HEAD | grep -o '.*#[0-9]*'")))
        (if (= (length branch-name) 0) () (insert (concat (replace-regexp-in-string "\n" "" branch-name) " "))))
      (evil-insert-state))

    (defun jm/open-main ()
      (interactive)
      (find-file (expand-file-name "~/.org/main.org")))

    (defun jm/open-inbox ()
      (interactive)
      (find-file (expand-file-name "~/.org/inbox.org")))

    (defun jm/open-references ()
      (interactive)
      (find-file (expand-file-name "~/.org/references.org")))

    (defun jm/open-standup ()
      (interactive)
      (find-file (expand-file-name "~/.org/standup.org")))

    (defun jm/helm-org-dir ()
      (interactive)
      (helm-find-files-1 (expand-file-name "~/.org/")))

    (defun jm/helm-home-dir ()
      (interactive)
      (helm-find-files-1 (expand-file-name "~/")))

    (defun jm/helm-work-dir ()
      (interactive)
      (helm-find-files-1 (expand-file-name "~/Work/")))

    (defun jm/helm-forks-dir ()
      (interactive)
      (helm-find-files-1 (expand-file-name "~/Work/forks/")))

    (defun jm/org-github-todo ()
      (interactive)
      (end-of-buffer)
      (insert (shell-command-to-string "$HOME/.bin/org-standup-in.sh  2> /dev/null"))
      (org-content))

    (defun jm/insert-today ()
      (interactive)
      (insert (shell-command-to-string "/bin/date \"+%Y-%m-%d\"")))

    (defun jm/get-column ()
      (number-to-string (+ (current-column) 1)))

    (defun jm/get-line-number ()
      (number-to-string (line-number-at-pos)))

    (defun jm/open-with-line (app)
      (when buffer-file-name
        (save-buffer)
        (shell-command (concat app " \"" buffer-file-name ":" (jm/get-line-number) "\""))))

    (defun jm/open-with-line-column (app)
      (when buffer-file-name
        (save-buffer)
        (shell-command (concat app " \"" buffer-file-name ":" (jm/get-line-number) ":" (jm/get-column) "\""))))

    (defun jm/open-with-line-column-vim (app)
      (when buffer-file-name
        (shell-command (concat app " \"" buffer-file-name "\" \"+normal " (jm/get-line-number) "G" (jm/get-column) "|\""))))

    (defun jm/open-with-reveal (app)
      (shell-command (concat "osascript -e 'tell application \"" app "\" to activate'")))

    (defun jm/open-with-sublime ()
      (interactive)
      (jm/open-with-line-column "/usr/local/bin/subl"))

    (defun jm/open-with-idea ()
      (interactive)
      (jm/open-with-line "/usr/local/bin/idea")
      (jm/open-with-reveal "IntelliJ IDEA"))

    (defun jm/open-with-nvim ()
      (interactive)
      (jm/open-with-line-column-vim "/usr/local/Cellar/neovim-dot-app/HEAD/bin/gnvim"))
#+end_src
** Endless Autocorrect
Per [[http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html][Endless parentheses]] copied on 2016-05-17
#+begin_src emacs-lisp :results none
(define-key ctl-x-map "\C-i"
  #'endless/ispell-word-then-abbrev)

(defun endless/simple-get-word ()
  (car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'."
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
                 ;; Word was corrected or used quit.
                 (if (ispell-word nil 'quiet)
                     nil ; End the loop.
                   ;; Also end if we reach `bob'.
                   (not (bobp)))
               ;; If there's no word at point, keep looking
               ;; until `bob'.
               (not (bobp)))
        (backward-word)
        (backward-char))
      (setq aft (endless/simple-get-word)))
    (if (and aft bef (not (equal aft bef)))
        (let ((aft (downcase aft))
              (bef (downcase bef)))
          (define-abbrev
            (if p local-abbrev-table global-abbrev-table)
            bef aft)
          (message "\"%s\" now expands to \"%s\" %sally"
                   bef aft (if p "loc" "glob")))
      (user-error "No typo at or before point"))))
#+end_src
