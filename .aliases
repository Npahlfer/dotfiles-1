#!/usr/bin/env bash

CIRCLE_URL="https://circleci.com/gh"
GITHUB_URL='https://github.com'

# Aliases Helpers
alias sp='source $HOME/.profile'
alias alia='ec $HOME/.aliases && sp'
alias aliap='ec $HOME/.private/.profile && sp'
ali() {
  sp
  ( alias
    typeset -f | grep '^\w.*() {' | sed 's/ () {//' \
 ) | grep "$@" | sort
}

# Editor
alias vi='nvim'
alias v='nvim'
alias nv='nvim'
alias vf='_with_fzf nvim'
alias sf='_with_fzf subl'
alias et='emacsclient --tty'
alias e='_with_fzf "ec"'
alias etf='_with_fzf "emacsclient --tty"'

ea() {
  ec $(ag "$@" | fzf -0 -1 |  awk -F: '{print "+" $2 " " $1}')
}

# ZSH Specific
if [ -n "$ZSH_VERSION" ]; then
  alias -g F='"$(fzf)"'
  alias -g L='| less -SRi'
  alias -g LL='2>&1 | less -SRi'
  alias -g JI='$(_jira_current_issue_key_or_assigned)'
fi

# Quick edit
alias eco='_with_fzf "ec" ".conf$" '
alias esc='_with_fzf "ec" ".scala$" '
alias ej='_with_fzf "ec" ".java$" '
alias esb='_with_fzf "ec" ".sbt$" '
alias epy='_with_fzf "ec" ".py$" '
alias esh='_with_fzf "ec" ".sh$" '
alias ejs='_with_fzf "ec" ".js$" '
alias ejo='_with_fzf "ec" ".json$" '
alias exm='_with_fzf "ec" ".xml$" '
alias eo='ee "(jm/open-org-dir)"'

# Sublime
alias st='subl'
alias stt='subl ./' # Depends on the 'st' command in the ~/.bin dir.
alias sproj="cd $WORK && sublime-project"
alias spp='EDITOR=subl fpp'
alias se='EDITOR=subl'

# Convenience
agl() { ag --color --after=4 --path-to-ignore ~/.agignore "$@" | less -SRi; }
ags() { ag --color --after=4 --smart-case --path-to-ignore ~/.agignore "$@" | less -SRi; }
uu() { ag --color --before=2 --after=4 --literal --hidden --path-to-ignore ~/.agignore "$@" | less -SRi; }
agm() { ag --color --after=20 --literal "<<<<<<<" | less -SRi; } #Forgotten merge conflicts
alias cay='cal -y'
alias clf='clf -c'
alias ca='_with_fzf "cat"'
alias cdp='cd "$(dirname "$(pbpaste)")"'
alias cf='cd "$(dirname "$(fzf)")"'
alias dk='docker'
alias dkp='docker ps'
dki() { docker images | awk '{print $1 ":" $2}' | sort -u ;}
alias dc='docker-compose'
alias dm='docker-machine'
dbuild() {
    local name="$(basename "$(pwd)")"
    local image="$(_docker_pick_images ${name:0:5} || _docker_pick_images)"
    docker build -t "$image" . && docker run -it "$image"
}
dlog() { docker logs -f "$(_docker_pick_container $1)" ;}
drun() { docker run -it "$(_docker_pick_images $1)" bash ;}
drunb() { docker run --entrypoint='/bin/bash' -it "$(_docker_pick_images $1)" ;}
dbash() { docker exec -it "$(_docker_pick_container $1)" bash ;}
dsh() { docker exec -it "$(_docker_pick_container $1)" sh ;}
dkill() { docker kill "$(_docker_pick_container $1)" ;}
alias dkillall='docker ps -q | xargs -r docker kill'
alias drmiall='docker images -q | xargs -r docker rmi -f'
alias dtest='docker build -t $(basename $(pwd)) . && docker run -it $(basename $(pwd))'
alias epoch='date +%s000'
alias ep='pbpaste | $HOME/.bin/ep.py'
alias gist='gist -p'
alias goo='google ' # Depends on ZSH google plugin.
alias hey="growlnotify 'Command Done!' -m 'Yes!'"
alias hi='history | grep '
alias hosts='sudo vi /etc/hosts'
alias jql='jq -C . | less -SRi'
jqx() { jq . -C "$@" | less -SRi; }
alias jqc='pbpaste | jq .'
alias jqcl='pbpaste | jq -C . | less -SRi'
alias ip='ifconfig | grep "inet 1"'
idiff() { icdiff "$1" "$2" | less -SRi ; }
idif() { icdiff "$(fzf -q $1)" "$(fzf -q $2)" | less -SRi ; }
lc() { pygmentize $@ | less -SRi; }
alias lcf='_with_fzf "lc"'
alias le='less -SRi'
alias lf='_with_fzf cat | less -SRi'
alias ler='less README.md'
alias vir="$EDITOR README.md"
vme() { $EDITOR "$1" & vmd "$1"; }
alias vms='EDITOR=subl vme'
alias vmr='EDITOR=subl vme README.md'
alias yml2json="python3 -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' <"
alias emr='EDITOR=ec vme README.md'
alias lo='/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'
alias no='e ~/.org/MAIN.org'
alias m='make'
alias ml='make -f Makefile.docker'
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
alias op='open "$(pbpaste)"'
alias opd='open "$(basename "$(pbpaste)")"'
alias pwdc='pwd | tr -d "\n" | pbcopy'
alias pbclean='pbpaste | pbcopy'
alias rmq='rabbitmq-server'
alias redis="(mkdir -p /tmp/redis && cd /tmp/redis && redis-server &)"
alias redis-flush='redis-cli flushall'
s() { ssh "$@"  -t 'command; tmux -CC attach -t jm || tmux -CC new -s jm' ;}
ss() { ssh "$@"  -t 'command; tmux -S /tmp/shared attach -t shared || tmux -S /tmp/shared new -s shared' ;}
alias mtmp='cd "$(mktemp -d -t 3)"'
alias tailf='tail -F'
alias tf='terraform'
alias tff='tree -afC -I "\.git|.idea|venv|vendor|pkg|target|targets|node_modules"'
alias tfl='tree -afC -I "\.git|.idea|venv|vendor|pkg|target|targets|node_modules" | less -SRI'
alias tfs='tree -afC -I "\.git|.idea|venv|vendor|pkg|target|targets|node_modules" "src"'
alias treef='tree -fa | grep -i'
alias updatedb='sudo /usr/libexec/locate.updatedb'
alias vg='vagrant'
alias vgs='vagrant global-status'
vghalt() { vagrant global-status | awk '{ if ((length($1) == 7) && ($4 == "running"))  print $1 }' | xargs vagrant halt ;}
vgdestroyc() {  vagrant global-status | awk '{ if ((length($1) == 7) && ($5 ~ /chef-repo/))  print $1 }' | xargs vagrant destroy -f ;}
vgdestroyall() { vagrant global-status | awk '{ if (length($1) == 7)  print $1 }' | xargs vagrant destroy -f ;}
alias vimrc='vi $HOME/.vimrc'
alias zshrc='vi $HOME/.zshrc'
alias xargsn='perl -p -e "s/\n/\0/;" | xargs -0'
cb() { open "$(_chrome_parse_bookmarks | _fzf \"$1\" | cut -d '|' -f1)"; }

# AWS
alias ash='aws-shell'
alias s3='aws s3'
alias s3uw='aws s3 --region us-west-2'
alias s3ue='aws s3 --region us-east-1'
alias s3ew='aws s3 --region eu-west-1'

## Git
alias gl='git pull --tags'
alias gbclean='git fetch --all --prune && git branch | grep -v "^*" | grep -v "master" | fzf -m | xargs git branch -D'
alias gbcleanall='git fetch --all --prune && git branch | grep -v "^*" | grep -v "master" | xargs git branch -D'
alias gcml='git checkout master && git pull'
alias gca='git commit --amend'
alias gcaa='git commit . --amend'
alias gclon='git clone "$(_github_pick_repo)"'
alias gcane='git commit --amend --no-edit -n'
alias gfo='git fetch origin && git fetch origin --tags'
alias gdff='git icdiff | less -SRi'
alias gdfff='git diff --color | diff-so-fancy | less -SRi'
alias gdf='git diff -- "$(fzf)"'
alias gwab='git worktree add "$(pwd)-bugfix" "origin/master" && cd "$(pwd)-bugfix"'
alias gwa='_git_switch_worktree'
alias gwaf='$(git worktree list | fzf | _pick_first_col)'
gcof() { git checkout "$(_git_pick_branch_no_origin "'$1")"; }
alias gsp='git show "$(_git_pick_branch):$(fzf)"'
alias gdp='git diff "$(_git_pick_branch)" -- "$(fzf)"'
alias gdcf='git diff "$(_git_pick_commit)" -- "$(fzf)"'
alias gci='_github_create_issue'
alias gshowf='git show "$(_git_pick_commit):$(fzf)" | pygmentize | less -SRi'
gshow() { git show "$1:$2" | vi - ;}
gshowm() { git show "origin/master:$1" | vi - ;}
alias gwip='(git log --oneline master..HEAD | grep -ei wip) || echo "ok"'
alias groot='cd "$(git rev-parse --show-toplevel)"'
alias gcp='git add -p && git commit' # Commiting part of a file.
alias gpp='git push --set-upstream origin $(git symbolic-ref --short -q HEAD)'
alias ghbp='gpp && sleep 1 && hbp'
alias ghw='watch -n10 github-events'
alias gpick='git cherry-pick'
alias gcv='git commit -v' # Commit all with a Diff view.
alias gds='git diff --stat'
alias gdo='git diff origin/master'
alias gdc='git diff --cached'
alias gdos='git diff origin/master --stat'
gk() { gitk $@; }
alias gkap='gitk --all --date-order $(git log -g --pretty=%H)'
alias gll='git log -p'
alias glf='git log -p -- "$(_fzf)"'
alias glgg='git log --graph --decorate'
alias gllg="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gplush='git pull && git push'
gms() { git commit -n -m "$(_trim "$(_jira_current_issue_key_or_assigned) $1")" ${@:2} ;}
alias gmc='git commit -m'
alias gma='git merge --abort'
alias gmom='git fetch origin && git merge origin/master'
alias gmt='git read-tree -u -m' # merge/squash changes without a commit
alias gnew='_git_new_branch'
gnewc() { _git_new_branch "$1" && git commit -n -m "$@" ;}
gnewj() { _git_new_branch "$(_jira_create "$1" "$2")" ;}
alias gnewp='_git_new_branch "$(pbpaste)"'

gnewic() {
  local title="$1"
  local desc="$2"
  gnewi "${title}" "${desc}"
  git commit -n -m "$(_trim "$(_jira_current_issue_key_or_assigned) ${title}\n\n${desc}")" "${@:3}"
}

alias gnewa='_git_new_branch "$(_jira_assigned_issues | fzf)"'
gnews() { _git_new_branch "$(_jira_search_text "$1")" ;}
alias gnewh='_github_new_branch'

alias gnewm='git checkout master && git pull && gnew'
alias gra='git rebase --abort'
alias grc='git rebase --continue'
alias greset='git fetch origin && git reset --hard origin/master'
alias gri='git rebase -i'
alias gro='git rebase -i master'
alias grom='git rebase -i origin/master'
alias gs='git status'
alias gsa='git stash apply'
alias gsl='git stash list'
alias gss='git stash save'
alias gu='_github_open_url'
alias gupd='git stash && git pull && git stash apply'
gvbump() { git commit -m "bump to version $(awk '{print $3}' version.sbt)" version.sbt ; }

# Github
alias ha='open "$GITHUB_URL"'
alias hp='open "$GITHUB_URL/$(_git_repo)/pulls"'
alias hc='open "$GITHUB_URL/$(_git_repo)/tree/$(_git_current_branch_url)"'
alias ht='open "$GITHUB_URL/$(_git_repo)/tree/$(_git_current_branch_url)"'
alias hbp='open "$GITHUB_URL/$(_git_repo)/compare/master...$(_git_current_branch_url)"'
alias hb='open "$GITHUB_URL/$(_git_repo)/branches"'
alias his='open "$GITHUB_URL/$(_git_repo)/issues"'
alias hw='open "$GITHUB_URL/$(_git_repo)/wiki"'
alias hr='open "$GITHUB_URL/$(_git_repo)"'
alias waf='open "$WAFFLE_URL/$(_git_repo)"'

# Jenkins
alias jenk='open "$JENKINS/job/$GITHUB_ORG/job/$(_git_repo_name)/job/$(_git_current_branch)/"'
alias jenkm='open "$JENKINS/job/$GITHUB_ORG/job/$(_git_repo_name)/job/master/"'
alias jenkmc='open "$JENKINS/job/$GITHUB_ORG/job/$(_git_repo_name)/job/master/lastBuild/console"'
alias jenkj='open "$JENKINS/job/$GITHUB_ORG/job/$(_git_repo_name)"'

# CicleCI
alias cim='open "$CIRCLE_URL/$(_git_repo)"'
alias cir='open "$CIRCLE_URL/$(_git_repo)/tree/$(_git_current_branch_url)"'
alias cirb='_circle_branch'
alias cirs='_circle_status'
alias cirss='_circle_statuses'

# MR
alias mrs='mr status'
alias mru='mr update' #Updates all repos
alias mrus='mr update && mr status' # Syncs all repo
alias mr-clear='mr run git stash clear'
alias mr-clean='mr run git clean -fd'

# General
alias ic=imgcat
fn() { find . -iname "*$@*" ;}
fne() { find . -iname "*.$@" ;}
alias cpb='cd $(dirname "$(pbpaste)")'
alias psa='ps aux | grep -i'
whichl() { ls -lha "$(where $1)" ;}

# Emacs
alias emacs-clean="find ~/.emacs.d -name '*.elc' -delete"
emacs-rebuild-eshell-alias() {
  alias | sed "s/='/ /; s/'$//; s/^/alias /" > ~/.emacs.d/.cache/eshell/alias
}


# Mac Specific
if [[ "$(uname)" == 'Darwin' ]]; then
  alias which='where'
fi

alias da='date && date -u'
alias qrc='pbpaste | qr'
alias pgcli='echo $PGHOST && pgcli'

# Home/.files
alias home='git --work-tree=$HOME --git-dir=$HOME/.files.git'
alias hd='home diff'
alias hdf='home icdiff'
hadd() {
  echo "$*" | grep -vi '.org\|.config\|.private\|work\|Dropbox' && home add -f "$@"
}
alias hcommit='home commit -m'
alias hlog='home log -p'
alias hs='home status'

# Languages
alias scal='scala -Dscala.color'
agsbt() { agq "$@" -a --depth 2 ./*.{sbt,scala} ;}
alias groov="groovyConsole > /dev/null &"
alias yar='nvm install && yarn'

# AWS
alias ec2d='aws ec2 describe-instances | jq -C . | less -SRi'
ec2ip() { jq ".Reservations[].Instances[] | select((.PrivateIpAddress == \"$1\" or .PublicIpAddress == \"$1\"))" ;}
alias r53="aws route53 list-hosted-zones | jq '.HostedZones[].Id' | xargs -n1 -P0 aws route53 list-resource-record-sets --hosted-zone-id --output text | grep"

# Python Aliases
alias ipy='ipython3'
alias ipyn='ipython3 notebook'
alias py='python3'

# Website
alias o='open $(pbpaste)'
alias c2='open "https://console.aws.amazon.com/ec2/"'

# Brew
alias bdump='brew bundle --global dump'
alias bcleanup='brew bundle --global cleanup' # --force

# Bub
alias b='bub'
alias bsh='bub ec2'
alias bj='bub jenkins'

# JIRA
alias j=jira
alias jb='jira browse "$(_jira_current_issue_key_or_assigned)"'
alias jbp='jira browse "$(pbpaste | _git_filter_issue_key)"'
alias jc='jira create -p PL -o issuetype=Task'
alias jcc='_jira_create'
alias jca='jira create -p PL -o issuetype=Task -o assignee="${JIRA_USER%@*}"'
alias je='jira edit "$(_jira_current_issue_key_or_assigned)"'
alias jj='jira "$(_jira_current_issue_key_or_assigned)"'
alias jo='open "${JIRA_URL}/browse/$(_jira_current_issue_key_or_assigned)"'
alias jcs='jira subtask "$(_jira_current_issue_key_or_assigned)"'
jcss() { jira subtask "$(_jira_search "$1")" ;}
alias jcsa='jira subtask "$(_jira_current_issue_key_or_assigned)" -o assignee="${JIRA_USER%@*}"'
alias jt='jira ls -q "assignee = currentUser() and status != done"'
alias jtd='jira transition Done "$(_jira_current_issue_key_or_assigned)"'
alias jtde='jira transition Deployed "$(_jira_current_issue_key_or_assigned)"'
alias jtp='jira transition "In Progress" "$(_jira_current_issue_key_or_assigned)"'
alias jtr='jira transition Review "$(_jira_current_issue_key_or_assigned)"'
js() { jira "$(_jira_search "$1")" ;}
jsb() { jira browse "$(_jira_search "$1")" ;}
