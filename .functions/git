#!/usr/bin/env bash

_git_repo() {
  git config --get remote.origin.url \
    | cut -d ':' -f2 \
    | cut -d '.' -f1 \
    | head -n1
}

_git_repo_name() {
  git config --get remote.origin.url \
    | cut -d/ -f2 \
    | cut -d. -f1
}

_git_current_branch() {
  git symbolic-ref --short -q HEAD
}

_git_current_branch_url() {
  _git_current_branch \
    | sed "s/#/%23/g"
}

_git_filter_issue_key() {
  sed 's/patch-//' \
    | grep -oE '^[A-Z]+-[0-9]+'
}

_git_current_issue_number() {
  _git_current_branch \
    | (_git_filter_issue_key || echo '')
}

_git_pick_branch_no_origin() {
  local filter="$1"
  _git_pick_branch "$filter" \
    | sed 's/origin\///g'
}

_git_pick_branch() {
  local filter="$1"
  git branch --all --sort=-committerdate \
    |  fzf -q "$filter" \
    | sed 's/remotes\///g' \
    | cut -c 3-
}

_git_pick_commit() {
  git log --oneline --all \
    | head -n 100 \
    | _fzf "$1" \
    | _pick_first_col
}

_git_commit_with_issue_key() {
  local message="$1"
  local issue_key
  issue_key="$(echo "${message}" | _git_filter_issue_key)"
  if [[ -z "${issue_key}" ]]; then
    message="$(_jira_current_issue_key_or_assigned) ${message}"
  fi
  git commit -n -m "$(_trim ${message})" "${@:2}"
}

_git_new_branch() {
  local name="$1"
  git checkout -b "$(echo "$name" | tr ' #:,.+^&*()`[]@$%/' '-' | sed -r 's/-+/-/g')"
}

_git_new_branch_from_new_issue() {
  _git_new_branch "$(_jira_create "$@")"
}

_git_new_branch_and_commit_from_new_issue() {
  local title="$1"
  local desc="$2"
  _git_new_branch_from_new_issue "${title}" "${desc}"
  git commit -n -m "$(_trim "$(_jira_current_issue_key_or_assigned) ${title}\n\n${desc}")" "${@:3}"
}
_github() {
  local endpoint="$1"
  curl --fail --silent -H "Authorization: token $(keyring get system github_token)" \
       "https://api.github.com/$endpoint"
}

_github_post() {
  local endpoint="$1"
  local payload="$2"
  curl --fail --silent -XPOST -H "Authorization: token $(keyring get system github_token)" \
       "https://api.github.com/$endpoint" --data "$payload"
}

_github_search_issues() {
  local label="$1"
  _github "search/issues?q=label:$label&per_page=300"
}

_github_repos() {
  _github 'user/repos?per_page=200'
}

_github_repo_names() {
  _github_repos | jq -r '.[].full_name'
}

_github_repo_urls() {
  for name in $(_github_repo_names); do
    __github_repo_url "$name"
  done
}

__github_repo_url() {
  local repo="$1"
  local repo_url="https://github.com/$repo"
  echo "<a href=\"$repo_url\">$1</a>"
  echo "<a href=\"$repo_url/issues\">$1 - Issues</a>"
  echo "<a href=\"$repo_url/issues/new\">$1 - New Issues</a>"
  echo "<a href=\"$repo_url/pulls\">$1 - Pull Requests</a>"
  echo "<a href=\"$repo_url/branches\">$1 - Branches</a>"
}

_github_pick_repo() {
  _github_repos \
    | jq -r '.[].git_url' \
    | _fzf "$1"
}

_github_open_url() {
  open "$(_github_pick_url $@)"
}

_github_pick_url() {
  CACHE_TTL=86400 _cached _github_repo_urls \
    | _fzf "https://github.com//$@"
}

_github_repo_issues() {
  _github "repos/$(_git_repo)/issues" \
    | _github_format_issues
}

_github_issues() {
  _github "issues?assignee=$(_github_user)" \
    | REPO="$(_git_repo)" jq -r \
      '.[] | if (env.REPO == .repository.full_name) then "" else .repository.full_name end + "#\(.number | tostring)-\(.title)"'
}

_github_issues_search() {
  local label="$1"
  _github "search/issues?q=label:$label&per_page=300"
}

_github_involved_issues() {
    _github "search/issues?q=is:open+involves:$(_github_user)+user:$(_github_org)&sort=updated&order=desc&per_page=300" \
        | jq '.items[]'
}

_github_format_issues() {
  jq -r '.[] | ["#" + (.number | tostring), .title] | join("-")'
}

_github_format_issue() {
  jq -r '["#" + (.number | tostring), .title] | join("-")'
}

_github_format_search_issues() {
  jq -r '.items[] | [(.repository_url | sub(".*/"; "")) + "#" + (.number | tostring),
    .title, .state, ([.labels[].name] | join(", ")), .assignee.login] | join("ยก")' \
      | column -s 'ยก' -t
}

_github_user() {
  git config --get github.user
}

_github_team() {
  git config --get github.team
}

_github_org() {
  git config --get github.org
}

_github_repo_assigned_issues() {
  _github "repos/$(_git_repo)/issues?assignee=$(_github_user)" \
    | _github_format_issues
}

_github_create_issue() {
  local title="$1"
  local body="$2"
  local assignee="${3:-$(_github_user)}"
  local labels="${4:-"$(_github_team)"}"
  local payload
  payload="$(jo title="$title" body="$body" assignee="$assignee" labels="$(jo -a $labels)")"
  _github_post "repos/$(_git_repo)/issues" "$payload"
}

_github_new_branch() {
  local title="$1"
  local body="$2"
  _git_new_branch "$(_github_create_issue "$title" "$body" | _github_format_issue)"
}

_github_events() {
  _github "users/$(_github_user)/events/orgs/$(_github_org)?page=[1-9]"
}

_git_switch_worktree() {
  local cur_dir
  cur_dir="$(basename "$(pwd)")"
  if [[ "${cur_dir}" =~ .*bugfix ]]; then
    cd "${cur_dir//\-bugfix//}"
  else
    cd "${cur_dir}-bugfix"
  fi
}

_github_pr() {
  local reviewers="${1:-$(git config --get github.reviewers)}"

  local url
  local message
  message="$(_git_current_branch | sed "s/-/ /g; s/ /-/")"
  message="${message}\n\n$(git log origin/master...HEAD --no-merges --pretty=format:"->%s\n%b\n")"
  url="$(hub pull-request -F <(printf "${message}") -r "${reviewers}")"
  if [[ ! -z "$url" ]]; then
    sleep 0.2
    open "${url}"
  else
    _warn 'Failed to create PR.'
  fi
}

_git_push_pr_if_commits() {
  local commit_count
  commit_count="$(git log origin/master...HEAD --pretty=format:"%h" | wc -w | tr -d ' ')"
  echo "${commit_count}"
  if [[ "${commit_count}" != '0' ]]; then
    git push
    _github_pr
  fi
}

mass-master() {
  mass 'git status && git checkout master && git pull && git pull --tags'
}

mass-prep() {
  local branch="$1"
  if [[ -z "${branch}" ]]; then
    echo 'No branch defined, stopping.'
    return 1
  fi
  mass_master
  mass "git checkout -b '${branch}'"
}

mass-done() {
  local message="$1"
  if [[ -z "${message}" ]]; then
    echo 'No commit message defined, stopping.'
    return 1
  fi
  mass "git commit -n -m '${message}' ."
  mass _git_push_pr_if_commits
}

mass () {
  find . -maxdepth 2 -type d -name '.git' \
    | _mass "$@"
}

_mass() {
  parallel --max-proc 20 '(cd $(dirname {}) && echo "\n=> $PWD <=" &&'" \"$HOME/.bin/env.sh\" $* )"
}
