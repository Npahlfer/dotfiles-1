#!/usr/bin/env bash

_docker_pick_container() {
  local tag_prefix="$1"
  docker ps \
    | grep -v 'CONTAINER ID' \
    | _fzf "'${tag_prefix}" \
    | _pick_first_col
}

_docker_pick_images() {
  docker images \
    | awk '$1 != "REPOSITORY" {print $1 ":" $2}' \
    | _fzf "'$1"
}

_consul_list_services_dns() {
  local domain="$1"
  local node="${2:-consul}"
  curl --fail --silent "http://$node.service.$domain:8500/v1/catalog/services" \
    | jq -r 'to_entries[] | .key, ({key, value: .value[]} | .value + "." + .key)' \
    | sed "s/$/\.service\.$domain/"
}

_chrome_parse_bookmarks() {
  jq -r \
     '.roots.bookmark_bar
      | recurse(.children[]?)
      | select(.type == "url")
      | "\(.url) | \(.name)"' \
     "$HOME/Library/Application Support/Google/Chrome/Default/Bookmarks"
}

_circle() {
  local url="$1"
  local method="${2:-GET}"
  curl --silent --fail -X "${method}" "https://circleci.com/api/v1.1/{$url}?circle-token=$CIRCLE_TOKEN"
}

_circle_statuses() {
  _circle "projects" \
    | jq -r '
      .[]
      | {name: "https://circleci.com/gh/\(.username)/\(.reponame)", last: .branches.master.recent_builds[0]}
      | "\(.name)/\(.last.build_num) \(.last.outcome // .last.lifecycle) \(.last.pushed_at)"
    ' \
    | column -s ' ' -t | sort
}

_circle_status() {
  _circle "project/github/$(_git_repo)" \
    | _circle_format_status
}

_circle_format_status() {
  jq -r '.[] | [
      "https://circleci.com/gh/\(.username)/\(.reponame)/\(.build_num)",
      .branch[0:40], .subject[0:40], .author_email, .outcome // .lifecycle
    ] | join("¶")' \
  | column -s '¶' -t
}

_circle_branch() {
  _circle "project/github/$(_git_repo)/tree/$(urlencode "$(_git_current_branch)")" \
    | _circle_format_status
}
_circle_follow() {
  _circle "project/github/$(_git_repo)/follow" 'POST'
}

_circle_trigger() {
  _circle "project/github/$(_git_repo)/tree/$(urlencode "$(_git_current_branch)")" 'POST'
}

_circle_detail_build() {
  local build="$1"
  _circle "project/github/$(_git_repo)/${build}" \
    | jq -r '.circle_yml.string, (.steps[] | .name, (.actions[] | "\(.index) | \(.status) | \(.output_url)"))'
}

urlencode() {
  python -c 'import urllib, sys; print urllib.quote(sys.argv[1], sys.argv[2])' \
         "$1" "$urlencode_safe"
}

nvm() {
  node --version
  unset -f nvm
  export NVM_DIR=~/.nvm
  [ -s /usr/local/opt/nvm/nvm.sh ] && source /usr/local/opt/nvm/nvm.sh  # This loads nvm
  nvm "$@"
  node --version
}

_todoist() {
  local resource_types="$1"
  curl --fail --silent https://todoist.com/API/v7/sync \
       -d token=$(keyring get system todoist) \
       -d sync_token='*' \
       -d resource_types="[\"${resource_types}\"]" \
       | jq ".${resource_types}[]"
}

_org_cleanup() {
  find "$HOME/.org" -maxdepth 1 -not -name '*.org*' -not -name '.projectile' -type f -delete
}

# Workaround broken projectile import.
_emacs_projectile_list() {
  find "$HOME/code"  -mindepth 1 -maxdepth 2 -type d | sed "s/\(.*\)\(code\/.*\)/\"~\/\2\/\"/g"
}

pidof() {
  ps axc | awk "{if (\$5==\"$1\") print \$1}"
}
